"""
M√≥dulo de gerenciamento de usu√°rios para sistema da gr√°fica.

Este m√≥dulo implementa todas as opera√ß√µes CRUD (Create, Read, Update, Delete)
para usu√°rios do sistema, incluindo hash de senhas e valida√ß√µes.

Sprint 3 - Cadastro de Usu√°rios
Autor: Sistema Gr√°fica
Data: 2025
"""

import hashlib
import os
import sys
from datetime import datetime
from typing import List, Dict, Optional, Tuple

# Adiciona o diret√≥rio pai ao path para importar connection
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import execute_query


def gerar_hash_senha(senha: str) -> str:
    """
    Gera hash SHA256 para a senha fornecida.
    
    Args:
        senha (str): Senha em texto puro
        
    Returns:
        str: Hash SHA256 da senha
        
    Exemplo:
        >>> hash_gerado = gerar_hash_senha("minha_senha123")
        >>> print(len(hash_gerado))  # 64 caracteres
        64
    """
    # Converte a senha para bytes e gera o hash SHA256
    senha_bytes = senha.encode('utf-8')
    hash_objeto = hashlib.sha256(senha_bytes)
    hash_hex = hash_objeto.hexdigest()
    
    print(f"üîê Hash gerado para senha (primeiros 8 caracteres): {hash_hex[:8]}...")
    return hash_hex


def criar_usuario(nome: str, email: str, senha: str, perfil: str) -> bool:
    """
    Cria um novo usu√°rio no sistema.
    
    Args:
        nome (str): Nome completo do usu√°rio
        email (str): Email √∫nico do usu√°rio
        senha (str): Senha em texto puro (ser√° convertida para hash)
        perfil (str): Perfil do usu√°rio ('admin' ou 'operador')
        
    Returns:
        bool: True se usu√°rio foi criado com sucesso, False caso contr√°rio
        
    Raises:
        ValueError: Se os par√¢metros estiverem inv√°lidos
        sqlite3.Error: Se houver erro no banco de dados
    """
    print(f"üë§ Criando usu√°rio: {nome} ({email}) - Perfil: {perfil}")
    
    # Valida√ß√µes b√°sicas
    if not nome or not nome.strip():
        raise ValueError("Nome √© obrigat√≥rio")
    
    if not email or not email.strip():
        raise ValueError("Email √© obrigat√≥rio")
    
    if '@' not in email:
        raise ValueError("Email deve ter formato v√°lido")
    
    if not senha or len(senha) < 4:
        raise ValueError("Senha deve ter pelo menos 4 caracteres")
    
    if perfil not in ['admin', 'operador']:
        raise ValueError("Perfil deve ser 'admin' ou 'operador'")
    
    try:
        # Verifica se email j√° existe
        usuario_existente = buscar_usuario_por_email(email)
        if usuario_existente:
            print(f"‚ùå Email {email} j√° est√° em uso")
            return False
        
        # Gera hash da senha
        senha_hash = gerar_hash_senha(senha)
        
        # Insere o novo usu√°rio
        query = """
        INSERT INTO usuarios (nome, email, senha, perfil, data_criacao, data_atualizacao) 
        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        """
        
        execute_query(query, (nome.strip(), email.strip().lower(), senha_hash, perfil))
        
        print(f"‚úÖ Usu√°rio {nome} criado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio: {e}")
        return False


def listar_usuarios() -> List[Dict]:
    """
    Lista todos os usu√°rios cadastrados no sistema.
    
    Returns:
        List[Dict]: Lista de dicion√°rios com dados dos usu√°rios
        
    Exemplo de retorno:
        [
            {
                'id': 1,
                'nome': 'Admin Sistema',
                'email': 'admin@grafica.com',
                'perfil': 'admin',
                'data_criacao': '2025-01-15 10:30:00'
            },
            ...
        ]
    """
    print("üìã Listando todos os usu√°rios...")
    
    try:
        query = """
        SELECT id, nome, email, perfil, data_criacao, data_atualizacao 
        FROM usuarios 
        ORDER BY nome
        """
        
        resultado = execute_query(query)
        
        if not resultado:
            print("‚ÑπÔ∏è  Nenhum usu√°rio encontrado")
            return []
        
        # Converte sqlite3.Row para dicion√°rios normais
        usuarios = []
        for row in resultado:
            usuario = {
                'id': row['id'],
                'nome': row['nome'],
                'email': row['email'],
                'perfil': row['perfil'],
                'data_criacao': row['data_criacao'],
                'data_atualizacao': row['data_atualizacao']
            }
            usuarios.append(usuario)
        
        print(f"‚úÖ {len(usuarios)} usu√°rio(s) encontrado(s)")
        return usuarios
        
    except Exception as e:
        print(f"‚ùå Erro ao listar usu√°rios: {e}")
        return []


def buscar_usuario_por_email(email: str) -> Optional[Dict]:
    """
    Busca um usu√°rio espec√≠fico pelo email.
    
    Args:
        email (str): Email do usu√°rio a ser buscado
        
    Returns:
        Dict ou None: Dados do usu√°rio se encontrado, None caso contr√°rio
        
    Exemplo:
        >>> usuario = buscar_usuario_por_email("admin@grafica.com")
        >>> if usuario:
        ...     print(f"Usu√°rio: {usuario['nome']}")
    """
    print(f"üîç Buscando usu√°rio por email: {email}")
    
    if not email or not email.strip():
        print("‚ùå Email n√£o fornecido")
        return None
    
    try:
        query = """
        SELECT id, nome, email, senha, perfil, data_criacao, data_atualizacao 
        FROM usuarios 
        WHERE LOWER(email) = LOWER(?)
        """
        
        resultado = execute_query(query, (email.strip(),))
        
        if not resultado:
            print(f"‚ÑπÔ∏è  Usu√°rio com email {email} n√£o encontrado")
            return None
        
        # Pega o primeiro resultado (email √© √∫nico)
        row = resultado[0]
        usuario = {
            'id': row['id'],
            'nome': row['nome'],
            'email': row['email'],
            'senha': row['senha'],  # Hash - nunca exibir em logs
            'perfil': row['perfil'],
            'data_criacao': row['data_criacao'],
            'data_atualizacao': row['data_atualizacao']
        }
        
        print(f"‚úÖ Usu√°rio encontrado: {usuario['nome']} - Perfil: {usuario['perfil']}")
        return usuario
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar usu√°rio: {e}")
        return None


def buscar_usuario_por_id(id_usuario: int) -> Optional[Dict]:
    """
    Busca um usu√°rio espec√≠fico pelo ID.
    
    Args:
        id_usuario (int): ID do usu√°rio
        
    Returns:
        Dict ou None: Dados do usu√°rio se encontrado, None caso contr√°rio
    """
    print(f"üîç Buscando usu√°rio por ID: {id_usuario}")
    
    if not id_usuario or id_usuario <= 0:
        print("‚ùå ID inv√°lido")
        return None
    
    try:
        query = """
        SELECT id, nome, email, perfil, data_criacao, data_atualizacao 
        FROM usuarios 
        WHERE id = ?
        """
        
        resultado = execute_query(query, (id_usuario,))
        
        if not resultado:
            print(f"‚ÑπÔ∏è  Usu√°rio com ID {id_usuario} n√£o encontrado")
            return None
        
        row = resultado[0]
        usuario = {
            'id': row['id'],
            'nome': row['nome'],
            'email': row['email'],
            'perfil': row['perfil'],
            'data_criacao': row['data_criacao'],
            'data_atualizacao': row['data_atualizacao']
        }
        
        print(f"‚úÖ Usu√°rio encontrado: {usuario['nome']}")
        return usuario
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar usu√°rio por ID: {e}")
        return None


def atualizar_usuario(id_usuario: int, nome: str = None, email: str = None, 
                     senha: str = None, perfil: str = None) -> bool:
    """
    Atualiza dados de um usu√°rio existente.
    
    Args:
        id_usuario (int): ID do usu√°rio a ser atualizado
        nome (str, optional): Novo nome
        email (str, optional): Novo email
        senha (str, optional): Nova senha (ser√° convertida para hash)
        perfil (str, optional): Novo perfil ('admin' ou 'operador')
        
    Returns:
        bool: True se atualiza√ß√£o foi bem-sucedida, False caso contr√°rio
        
    Exemplo:
        >>> # Atualizar apenas o nome
        >>> sucesso = atualizar_usuario(1, nome="Novo Nome")
        
        >>> # Atualizar nome e senha
        >>> sucesso = atualizar_usuario(1, nome="Jo√£o", senha="nova_senha123")
    """
    print(f"‚úèÔ∏è  Atualizando usu√°rio ID: {id_usuario}")
    
    if not id_usuario or id_usuario <= 0:
        print("‚ùå ID de usu√°rio inv√°lido")
        return False
    
    # Verifica se usu√°rio existe
    usuario_atual = buscar_usuario_por_id(id_usuario)
    if not usuario_atual:
        print(f"‚ùå Usu√°rio com ID {id_usuario} n√£o encontrado")
        return False
    
    try:
        # Monta query din√¢mica baseada nos campos fornecidos
        campos_update = []
        parametros = []
        
        if nome is not None and nome.strip():
            campos_update.append("nome = ?")
            parametros.append(nome.strip())
        
        if email is not None and email.strip():
            # Verifica se novo email j√° existe (em outro usu√°rio)
            if email.lower() != usuario_atual['email'].lower():
                usuario_email_existente = buscar_usuario_por_email(email)
                if usuario_email_existente:
                    print(f"‚ùå Email {email} j√° est√° em uso por outro usu√°rio")
                    return False
            
            if '@' not in email:
                print("‚ùå Email deve ter formato v√°lido")
                return False
                
            campos_update.append("email = ?")
            parametros.append(email.strip().lower())
        
        if senha is not None and senha.strip():
            if len(senha) < 4:
                print("‚ùå Senha deve ter pelo menos 4 caracteres")
                return False
                
            senha_hash = gerar_hash_senha(senha)
            campos_update.append("senha = ?")
            parametros.append(senha_hash)
        
        if perfil is not None and perfil.strip():
            if perfil not in ['admin', 'operador']:
                print("‚ùå Perfil deve ser 'admin' ou 'operador'")
                return False
                
            campos_update.append("perfil = ?")
            parametros.append(perfil)
        
        # Se nenhum campo foi fornecido para atualiza√ß√£o
        if not campos_update:
            print("‚ÑπÔ∏è  Nenhum campo fornecido para atualiza√ß√£o")
            return False
        
        # Adiciona data de atualiza√ß√£o
        campos_update.append("data_atualizacao = CURRENT_TIMESTAMP")
        parametros.append(id_usuario)  # Para a cl√°usula WHERE
        
        # Monta e executa query
        query = f"""
        UPDATE usuarios 
        SET {', '.join(campos_update)} 
        WHERE id = ?
        """
        
        execute_query(query, tuple(parametros))
        
        print(f"‚úÖ Usu√°rio ID {id_usuario} atualizado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar usu√°rio: {e}")
        return False


def deletar_usuario(id_usuario: int) -> bool:
    """
    Remove um usu√°rio do sistema.
    
    Args:
        id_usuario (int): ID do usu√°rio a ser removido
        
    Returns:
        bool: True se usu√°rio foi removido com sucesso, False caso contr√°rio
        
    Nota:
        Esta opera√ß√£o √© irrevers√≠vel. Use com cuidado!
    """
    print(f"üóëÔ∏è  Deletando usu√°rio ID: {id_usuario}")
    
    if not id_usuario or id_usuario <= 0:
        print("‚ùå ID de usu√°rio inv√°lido")
        return False
    
    try:
        # Verifica se usu√°rio existe antes de deletar
        usuario = buscar_usuario_por_id(id_usuario)
        if not usuario:
            print(f"‚ùå Usu√°rio com ID {id_usuario} n√£o encontrado")
            return False
        
        # Executa a exclus√£o
        query = "DELETE FROM usuarios WHERE id = ?"
        execute_query(query, (id_usuario,))
        
        print(f"‚úÖ Usu√°rio '{usuario['nome']}' removido com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao deletar usu√°rio: {e}")
        return False


def verificar_login(email: str, senha: str) -> Optional[Dict]:
    """
    Verifica credenciais de login do usu√°rio.
    
    Args:
        email (str): Email do usu√°rio
        senha (str): Senha em texto puro
        
    Returns:
        Dict ou None: Dados do usu√°rio se login v√°lido, None caso contr√°rio
        
    Exemplo:
        >>> usuario = verificar_login("admin@grafica.com", "admin123")
        >>> if usuario:
        ...     print(f"Login v√°lido: {usuario['nome']}")
    """
    print(f"üîê Verificando login para: {email}")
    
    if not email or not senha:
        print("‚ùå Email e senha s√£o obrigat√≥rios")
        return None
    
    try:
        # Busca usu√°rio pelo email
        usuario = buscar_usuario_por_email(email)
        if not usuario:
            print("‚ùå Usu√°rio n√£o encontrado")
            return None
        
        # Verifica senha
        senha_hash = gerar_hash_senha(senha)
        if senha_hash == usuario['senha']:
            print(f"‚úÖ Login v√°lido para {usuario['nome']} - Perfil: {usuario['perfil']}")
            # Remove a senha do retorno por seguran√ßa
            del usuario['senha']
            return usuario
        else:
            print("‚ùå Senha incorreta")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de login: {e}")
        return None


def contar_usuarios() -> int:
    """
    Conta o total de usu√°rios cadastrados.
    
    Returns:
        int: N√∫mero total de usu√°rios
    """
    try:
        resultado = execute_query("SELECT COUNT(*) as total FROM usuarios")
        return resultado[0]['total'] if resultado else 0
    except Exception as e:
        print(f"‚ùå Erro ao contar usu√°rios: {e}")
        return 0


def listar_usuarios_por_perfil(perfil: str) -> List[Dict]:
    """
    Lista usu√°rios filtrados por perfil.
    
    Args:
        perfil (str): Perfil a filtrar ('admin' ou 'operador')
        
    Returns:
        List[Dict]: Lista de usu√°rios do perfil especificado
    """
    print(f"üìã Listando usu√°rios com perfil: {perfil}")
    
    if perfil not in ['admin', 'operador']:
        print("‚ùå Perfil deve ser 'admin' ou 'operador'")
        return []
    
    try:
        query = """
        SELECT id, nome, email, perfil, data_criacao, data_atualizacao 
        FROM usuarios 
        WHERE perfil = ? 
        ORDER BY nome
        """
        
        resultado = execute_query(query, (perfil,))
        
        if not resultado:
            print(f"‚ÑπÔ∏è  Nenhum usu√°rio encontrado com perfil {perfil}")
            return []
        
        usuarios = []
        for row in resultado:
            usuario = {
                'id': row['id'],
                'nome': row['nome'],
                'email': row['email'],
                'perfil': row['perfil'],
                'data_criacao': row['data_criacao'],
                'data_atualizacao': row['data_atualizacao']
            }
            usuarios.append(usuario)
        
        print(f"‚úÖ {len(usuarios)} usu√°rio(s) encontrado(s) com perfil {perfil}")
        return usuarios
        
    except Exception as e:
        print(f"‚ùå Erro ao listar usu√°rios por perfil: {e}")
        return []


# ========================================================================================
# TESTES E EXECU√á√ÉO PRINCIPAL
# ========================================================================================

def executar_testes():
    """
    Executa testes b√°sicos do m√≥dulo de usu√°rios.
    """
    print("\n" + "=" * 60)
    print("üß™ EXECUTANDO TESTES DO M√ìDULO DE USU√ÅRIOS")
    print("=" * 60)
    
    try:
        print("\n1Ô∏è‚É£ Teste: Criar usu√°rio de teste")
        sucesso = criar_usuario(
            nome="Operador Teste",
            email="operador@grafica.com", 
            senha="teste123",
            perfil="operador"
        )
        print(f"Resultado: {'‚úÖ Sucesso' if sucesso else '‚ùå Falha'}")
        
        print("\n2Ô∏è‚É£ Teste: Listar todos os usu√°rios")
        usuarios = listar_usuarios()
        for usuario in usuarios:
            print(f"  - {usuario['nome']} ({usuario['email']}) - {usuario['perfil']}")
        
        print("\n3Ô∏è‚É£ Teste: Buscar usu√°rio por email")
        usuario = buscar_usuario_por_email("operador@grafica.com")
        if usuario:
            print(f"  Encontrado: {usuario['nome']} - Perfil: {usuario['perfil']}")
        
        print("\n4Ô∏è‚É£ Teste: Atualizar usu√°rio")
        if usuario:
            sucesso = atualizar_usuario(usuario['id'], nome="Operador Atualizado")
            print(f"Resultado: {'‚úÖ Sucesso' if sucesso else '‚ùå Falha'}")
        
        print("\n5Ô∏è‚É£ Teste: Verificar login")
        login_valido = verificar_login("operador@grafica.com", "teste123")
        if login_valido:
            print(f"  Login v√°lido: {login_valido['nome']}")
        
        print("\n6Ô∏è‚É£ Teste: Contar usu√°rios")
        total = contar_usuarios()
        print(f"  Total de usu√°rios: {total}")
        
        print("\n" + "=" * 60)
        print("‚úÖ TESTES CONCLU√çDOS COM SUCESSO!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Erro durante os testes: {e}")
        print("=" * 60)


if __name__ == "__main__":
    """
    Executa testes quando o m√≥dulo √© chamado diretamente.
    
    Uso: python modules/usuarios.py
    """
    executar_testes()